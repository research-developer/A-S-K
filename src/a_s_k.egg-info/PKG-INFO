Metadata-Version: 2.4
Name: a-s-k
Version: 0.1.0
Summary: A-S-K: A Semantic Kernel tools and CLIs
Author: Preston
License: 
                                         Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/your-org/your-repo
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE.MIT
License-File: NOTICE
Requires-Dist: typer[all]==0.9.0
Requires-Dist: pydantic<3,>=2.7
Requires-Dist: rich<14,>=13.7
Requires-Dist: openai>=1.35.0
Requires-Dist: python-dotenv<2,>=1.0
Requires-Dist: firecrawl-py<5,>=4.0
Requires-Dist: beautifulsoup4<5,>=4.12
Dynamic: license-file

# A‑S‑K — A Semantic Kernel (ASK)

A‑S‑K is a practical, testable framework and implementation blueprint for building AI systems that route, verify, and synthesize meaning. It treats language as a layered, compiler‑like stack from glyph geometry to discourse, enabling more transparent research workflows, richer annotations, and graph‑grounded reasoning.

This README is a standalone synthesis of the core concepts and the MVP path toward an AI‑powered research tool informed by A Semantic Kernel.


## Why A‑S‑K

- Structure first: Model language as layered computation rather than surface tokens alone.
- Trust by design: Bind every claim to provenance, typed structure, and uncertainty.
- Human‑AI collaboration: Keep humans in the loop for adjudication at decision boundaries.
- Scalability: Factor representations (operators vs payloads) to compress parameters while improving retrieval and analogy.


## A Semantic Kernel (ASK) — Core Model

ASK proposes a four‑layer stack. Each layer constrains the next and is optimized like a compiler pipeline:

1) Geometric Substrate (pre‑linguistic)
- Glyph affordances derived from simple forms: | stroke (distinction), O loop (enclosure), V aperture (receptivity), T cross (orthogonality/instantiation).
- These are biases, not hard meanings; they make certain encodings natural.

2) Glyph Operators (sub‑lexical)
- Consonants → operations (fold, turn, tighten, flow, route).
- Vowels → typed payloads (a base/open; e relational; i minimal/index; o whole/container; u rooted/enduring).
- Diphthongs → small structs (e.g., ae ≈ bound duality; ou ≈ enclosure/mapping; ui ≈ id–value unit).

3) Morphemes & Words (composition)
- Roots ≈ base functions; prefixes/suffixes ≈ decorators/coercions; inflections ≈ explicit pointers (tense/case/number).
- Latin is unusually transparent here, serving as a semantic routing case study.

4) Pragmatic Field (intent & effect)
- Speech‑act, audience model, context, and cultural priors govern routing choices and evaluation of effect.


## Latin as a Semantic Compiler (Analogy)

- Roots = primitive functions (manu‑ hand/handling; vert‑ turn; plic‑ fold).
- Prefixes/suffixes = wrappers/coercions (trans‑, meta‑, ‑tion, ‑itas).
- Inflectional endings = explicit pointers (tense/case/number).
- Treat consonant clusters as operators (mn handle; vr turn; pl/plic fold) and vowels as typed payloads.

Examples (tendencies, not rules):
- mn/man‑ → grasp/handle (manus, manipulate)
- pl/plic‑ → fold/layer/multiply (apply, multiply)
- vr/vert‑ → turn/route (invert, convert)


## A Calculus of Information–Causality

A working formula for how symbols produce effects:

E = k × A × M

- E (Effect): magnitude of impact in a target substrate (mind, org, system).
- k (Causality Constant): responsiveness of the substrate (openness, channel, modality).
- A (Alignment): structural resonance between symbol and target (feature overlap, schema fit).
- M (Meaning Density): coherent, orthogonal dimensions encoded; grows superlinearly with structure.

Practical use: increase A by mirroring target schemas; increase M by layering orthogonal evidence/features without redundancy.


## Reference Architecture (Semantic Routing Engine)

1) Capture: ingest web/text with provenance, timestamps, and hashing.
2) Lex–Morph Analyzer: segment prefixes/roots/suffixes/inflections; tag operator vs payload features.
3) Operator–Payload Factorizer: produce typed embeddings separating consonant operations from vowel payloads.
4) Semantic Composer: apply decorators/coercions; emit typed AST‑like structures per utterance.
5) Graph Binder: ground nodes/edges to an ontology with confidence and justifications.
6) Verifier: retrieval + counterfactual checks; highlight disagreements for human review.
7) Router: traverse operator paths for analogy and retrieval (e.g., fold‑family, turn→convert paths).
8) UX: accordion rationales, inline provenance, diff views for claims vs sources.


### Minimal Data Sketch

```json
{
  "Token": {
    "surface": "manipulation",
    "morph": { "prefix": null, "root": "man", "theme": "-ipul-", "suffix": "-ation" },
    "operators": ["mn", "pl"],
    "payloads": ["a", "i", "u", "o"],
    "features": { "action": "handle→fold→result", "type": "process→noun" }
  },
  "GraphNode": {
    "id": "Q123",
    "label": "Handling-With-Folding",
    "type": "Process",
    "evidence": ["doi:10.1234/abcd"],
    "confidence": 0.82,
    "facets": { "operatorPath": ["mn","pl"], "payloadSchema": {"a":"index→u:o"} }
  }
}
```


## MVP for the AI Research & Annotation Tool

Phase 1 (6–8 weeks)
- Web capture with highlights→claims extraction; source hashing.
- Morphological tagging for English/Latin; inline chips for operators/payloads with confidence.
- Claim graph with provenance; reviewer workflow (accept/reject, notes, audit trail).

Phase 2 (6–10 weeks)
- Train operator–payload embeddings; evaluate on analogy and sense disambiguation.
- Add routing queries (e.g., “fold‑family analogs of X”).
- Instrument dashboard to track predictions/hypotheses (below).

Phase 3
- Team spaces, role‑based gates, ontology alignment, and API for external agents with rationale constraints.

Key KPIs and Guardrails
- Time‑to‑verified‑claim; reviewer agreement; retrieval precision; rationale coverage.
- Provenance mandatory; uncertainty tracked; reversible merges and diffs.


## Test Bench: Common Word Decodings

Operationalize the framework on high‑frequency words to validate utility and tune priors. A record looks like:

```json
{
  "word": "give",
  "category": "verb",
  "operators": ["g", "v"],
  "payloads": ["i", "e"],
  "gloss": "impulse along a channel → transfer",
  "provenance": "PIE *gʰebʰ- (to give)",
  "confidence": "H"
}
```

Patterns to watch
- Modal -ould: ou (enclosure/mapping) + ld (hold/fold) with initial operator setting mode (w will; c/capacity; sh/ought).
- str‑ cluster: structure/constraint/tighten (string, strong, strict).
- gh: historical aspiration/clarity or force (light, might, sight, fight).


## Falsifiable Predictions (for empirical grounding)

1) Cursive Angularity Hypothesis: pen angles/lifts correlate with semantic orthogonality across linked words.
2) Capitalization Energy‑Barrier: capitals require measurably more effort, tracking conceptual primacy.
3) T‑Density Hypothesis: glyph “T” frequency correlates with structural/abstract reasoning demands.

Additional tests: cross‑lingual operator invariants; vowel‑type priors in disambiguation; graph compression from factorization vs baseline LMs.


## Limits, Caveats, Ethics

- Generative model, not universal etymology; treat phonosemantics as priors, not proof.
- Use morphology and provenance before phonetic intuition when in conflict.
- Respect language diversity; avoid Indo‑European bias where it does not fit.
- Expose alignment and meaning‑density overlays to reduce manipulative rhetoric.


## Roadmap (selected)

- Operator–payload embeddings with ablation studies (operators‑only vs payloads‑only vs combined).
- Knowledge graph schema evolution and ontology alignment tools.
- Reviewer playbooks and inter‑annotator agreement metrics for function words.
- Cross‑family replication (Semitic root‑and‑pattern, Sinitic morphosyllabic, Uralic).

### R&D: Positional Weighting and Corpus Tests (preregistered heuristics)

We will test whether letter position modulates operator/payload influence and whether corpus‑level distributions support the USK model.

- Positional weighting hypothesis:
  - Apos (aperture): central Gaussian window (PVL/OVP) — higher processing near word center.
  - Bpos (diagnosticity): edge boost (U‑shape) — first/last letters carry more identity.
  - Net W(i) = normalize(Apos×Bpos); used to weight operator contributions by position.
- Corpus hypotheses (falsifiable):
  - T‑density higher in academic/technical vs fiction (structural instantiation).
  - str-/tr-/ct clusters enriched in legal/engineering/science vs fiction (structure/constraint).
  - sk/sc clusters enriched in expository/scientific sections vs narrative (scan→select).
  - Vowel payload distributions differ by genre: i in code/docs; a in philosophy; o in ontology/object‑oriented.
  - -ion nominalizations enriched in academic texts; -ould modals enriched in dialogue/fiction.
  - Operator‑path entropy higher in technical prose; lexical entropy lower.
- Implementation plan:
  - Add `src/ask/position_weights.py` (Apos/Bpos/W(i)).
  - Add `src/ask/metrics.py` to compute glyph/cluster/path/diphthong/nominalization features.
  - Provide a notebook `notebooks/01_preregistered_tests.ipynb` with α=0.01, FDR correction, effect sizes, Bayes factors.
  - CLI: `ask corpus-stats --input <dir> --out metrics.jsonl`.


## Contributing

- Propose operator mappings or counterexamples with citations.
- Add decoded words with confidence ratings and provenance.
- Open issues for experimental design or UX flows that improve adjudication.


## License

This project is licensed under the MIT License. See [`LICENSE`](./LICENSE) for details.


## Install

Prerequisites: Python 3.10+

- Create a virtual environment and install in editable mode (recommended for development):

```bash
python3 -m venv .venv
source .venv/bin/activate
python3 -m pip install -e .
```

- Alternatively, just install dependencies without packaging (not recommended for CLI usage):

```bash
python3 -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt
```


## Quickstart

- Decode a word using the unified CLI (enhanced by default):

```bash
ask decode ask
ask decode manipulation --json
```

- Seed data lives in `data/decoded_words.jsonl` as JSONL records for the Test Bench.


## CLI Usage

All commands assume the package is installed (e.g., `python3 -m pip install -e .`).

### ask (unified CLI)

```bash
# Help and available commands
ask --help

# Decode a single word (enhanced view)
ask decode ask

# Minimal view (no morphology block or details)
ask decode manipulation --simple

# JSON output for scripting
ask decode manipulation --json

# Syntax parsing (pretty)
ask syntax patriarch

# Syntax parsing (JSON)
ask syntax heaven --json

# Verbose analysis with operator principles and payload types
ask decode manipulation --verbose

# Audit a decoded word with OpenAI (requires OPENAI_API_KEY)
OPENAI_API_KEY=sk-... ask audit "ask" --model gpt-5-mini

# Extract article content (requires FIRECRAWL_API_KEY)
FIRECRAWL_API_KEY=fc-... ask extract https://example.com/article

# Batch extract from a file of URLs (one per line)
FIRECRAWL_API_KEY=fc-... ask extract-batch --file urls.txt > results.json

# List operators or clusters with confidence
ask operators
ask operators --min-confidence 0.85
ask clusters

# Validate the ASK kernel proof and run self-tests
ask validate

# Batch decode
ask batch "ask,think,understand,manipulation" --json
```

### MCP Server (FastMCP)

You can expose A‑S‑K over the Model Context Protocol (MCP) to integrate with MCP‑compatible clients.

Prerequisites:

- Install the package (editable mode recommended during development):

```bash
python3 -m venv .venv
source .venv/bin/activate
python3 -m pip install -e .
```

- Install FastMCP runtime:

```bash
pip install fastmcp
```

Run the server over stdio:

```bash
ask-mcp
```

The server exposes two tools:

- `decode(word: str)` → returns the enhanced decode JSON
- `syntax(word: str, language: str = "english")` → returns USK syntax with elements and morphology

Notes:

- Set `ASK_GLYPH_PERSIST=1` to enable on‑disk learning for glyph field confidences used by the parser. This maps to the `persist` flag in the underlying services via `create_mcp_server()`.
- If `fastmcp` is not installed, `ask-mcp` will print a helpful message explaining how to install it.

Client integration:

- Configure your MCP client to launch `ask-mcp` as a stdio server. In many editors/clients, this is set in an MCP server registry/config file with a command entry of `ask-mcp` and no args.

### MCP Game

The MCP server exposes a simple word guessing game with two tools: `test_me` and `guess`. Game state is persisted under `data/guesses/` as JSON files keyed by UUID.

Tools

- `test_me(length?: number, include?: string[], num?: number = 3)`
  - Selects a secret word (not revealed).
  - Filters:
    - `length`: exact character length (optional)
    - `include`: list of characters that must appear in the word (optional)
  - Produces a left-to-right linear list of tags (operators/payload tags) of size `num` (default `3`). If `num` exceeds the number of available tags, all available tags are returned with a `warning` string.
  - Response:
    - `{ id: string, tags: string[], warning?: string }`

- `guess(id: string, guesses: string[], reveal?: boolean = false)`
  - Appends a guess attempt to the game, marks whether the latest guess is correct.
  - When `reveal=true`, includes the secret word.
  - Response:
    - `{ attempts: number, correct: boolean, reveal?: { word: string } }`

Storage

- Files saved at `data/guesses/<uuid>.json` with shape:

```json
{
  "id": "<uuid>",
  "word": "<secret>",
  "created_at": "<ISO8601>",
  "params": { "length": 8, "include": ["a","t"], "num": 3 },
  "tags": ["present", "base", "transform"],
  "attempts": [
    { "at": "<ISO8601>", "guesses": ["foobar"], "correct": false }
  ]
}
```

Examples (MCP client payloads)

- Start a game with three tags:

```json
{
  "tool": "test_me",
  "params": { "num": 3 }
}
```

- Start a game with filters and larger `num` (may return `warning` if too large):

```json
{
  "tool": "test_me",
  "params": { "length": 8, "include": ["a","t"], "num": 6 }
}
```

- Submit a guess and request reveal:

```json
{
  "tool": "guess",
  "params": { "id": "<uuid>", "guesses": ["practice"], "reveal": true }
}
```

Additional MCP examples

- Fetch normalized merged lists (all sections):

```json
{ "tool": "merged_lists", "params": {} }
```

- Fetch only field entries:

```json
{ "tool": "merged_lists", "params": { "section": "field_entries" } }
```

### Merged Glyph Dataset

To unify operator/payload maps (`data/glyphs.json`) with field-based glyph associations (`data/glyph_fields.json`) without losing information, use the merge script:

```bash
python tools/merge_glyph_datasets.py
```

This produces `data/glyphs_merged.json` with two top-level sections:

- `merged` — Exact, lossless union of the source objects (maps from both files preserved verbatim).
- `normalized` — List-based views for clients that prefer list-only interfaces. Sections include:
  - `vowels`, `payload_entries`, `operator_entries`, `complete_operator_entries`, `typed_payload_entries`,
    `cluster_entries`, `enhanced_cluster_entries`, `field_entries`, `tag_association_entries`.

Programmatic access:

- Python loader that always returns lists:

```python
from ask.merged_glyphs import get_merged_glyphs
mg = get_merged_glyphs()
fields = mg.field_entries()  # list
operators = mg.operator_entries()  # list
```

- Services facade (returns dict of lists, or a single list when filtered):

```python
from ask.core.services import get_services
s = get_services()
all_lists = s.merged_lists()
only_fields = s.merged_lists('field_entries')
```

- MCP tool (FastMCP):

```json
{ "tool": "merged_lists", "params": {} }
{ "tool": "merged_lists", "params": { "section": "field_entries" } }
```

Verification: the merge script asserts that each `merged` subsection is identical to its source and that normalized entries preserve key sets.

## Testing

Run the full test suite with pytest:

```bash
pytest -q
```

Run a single test file:

```bash
pytest -q tests/test_readme_examples.py
```

Run a specific test:

```bash
pytest -q tests/test_readme_examples.py::test_decode_manipulation_json
```

## Advanced CLI

- Stage-1 guessing using only descriptors (requires OPENAI_API_KEY):

```bash
ask audit-guess ask --guesses 5 --model gpt-5-mini
```

### ask-fields (field-based glyph analysis CLI)

```bash
# Help
ask-fields --help

# Decode with field-based operators and confidence tracking
ask-fields decode manipulation --detailed

# Inspect a glyph's field
ask-fields field k

# System statistics and high-confidence associations
ask-fields stats

# Teach the system a correct association (adjust confidence)
ask-fields learn "manipulation" p present --confidence 0.1

# Batch decode words from a file
ask-fields batch-decode words.txt --output results.json
```

## Environment

Create a `.env` file at the project root with any provider keys you want to use (optional):

```env
OPENAI_API_KEY=...  # required for audit command
# HUGGINGFACE_API_KEY=...
# GEMINI_API_KEY=...
```

Note: `.env` is listed in `.gitignore`. Do not commit secrets.


## Audit (Model-assisted review)

Use OpenAI `gpt-5-mini` to audit a decoded word (requires `OPENAI_API_KEY` in environment):

```bash
PYTHONPATH=src OPENAI_API_KEY=your_key python -m ask.cli audit ask
```

Options:

- `--model` to select an OpenAI chat model (default `gpt-5-mini`).
- `--no-json-out` to print a pretty (non-JSON) report.


## Project Structure

```
A-S-K/
├── README.md           # This file: overview and synthesis
├── GLYPHS.md           # The Standard Model of Glyphic Axioms
├── LICENSE             # MIT license
├── CONTRIBUTING.md     # How to contribute, dev setup
├── requirements.txt    # Runtime deps (typer, pydantic, rich)
├── examples/           # Notebooks and runnable scripts
├── data/               # Decoded word corpus and test sets
│   └── decoded_words.jsonl
├── tests/              # Unit tests (pytest)
└── src/                # Implementation code
    └── ask/
        ├── __init__.py
        ├── glyphs.py          # Operator/payload maps and clusters
        ├── factorizer.py      # decode_word(), extraction helpers
        ├── compose.py         # Minimal AST-like composition
        └── cli.py             # Typer CLI (python -m ask.cli)
```


## The ASK Proof: Self-Evidence

The word "ask" itself demonstrates the framework:

- **A** (aperture): Opens a typed unknown "?"
- **S** (stream): Broadcasts the query outward
- **K** (clamp): Resolves responses to discrete answer

Thus "ask" literally encodes the semantic kernel operation: instantiate unknown → route request → resolve result. This is why we've named the project A-S-K.


---

*For the complete glyph-level axioms and geometric complementarity patterns, see [GLYPHS.md](./GLYPHS.md)*
